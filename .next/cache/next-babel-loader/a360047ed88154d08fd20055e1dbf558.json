{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nvar options = ['Create a merge commit', 'Squash and merge', 'Rebase and merge'];\nexport default function SplitButton() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var anchorRef = React.useRef(null);\n\n  var _React$useState3 = React.useState(1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedIndex = _React$useState4[0],\n      setSelectedIndex = _React$useState4[1];\n\n  function handleClick() {\n    alert(\"You clicked \".concat(options[selectedIndex]));\n  }\n\n  function handleMenuItemClick(event, index) {\n    setSelectedIndex(index);\n    setOpen(false);\n  }\n\n  function handleToggle() {\n    setOpen(function (prevOpen) {\n      return !prevOpen;\n    });\n  }\n\n  function handleClose(event) {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  }\n\n  return React.createElement(Grid, {\n    container: true\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    align: \"center\"\n  }, React.createElement(ButtonGroup, {\n    variant: \"contained\",\n    color: \"primary\",\n    ref: anchorRef,\n    \"aria-label\": \"Split button\"\n  }, React.createElement(Button, {\n    onClick: handleClick\n  }, options[selectedIndex]), React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"small\",\n    \"aria-owns\": open ? 'menu-list-grow' : undefined,\n    \"aria-haspopup\": \"true\",\n    onClick: handleToggle\n  }, React.createElement(ArrowDropDownIcon, null))), React.createElement(Popper, {\n    open: open,\n    anchorEl: anchorRef.current,\n    transition: true,\n    disablePortal: true\n  }, function (_ref) {\n    var TransitionProps = _ref.TransitionProps,\n        placement = _ref.placement;\n    return React.createElement(Grow, _extends({}, TransitionProps, {\n      style: {\n        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'\n      }\n    }), React.createElement(Paper, {\n      id: \"menu-list-grow\"\n    }, React.createElement(ClickAwayListener, {\n      onClickAway: handleClose\n    }, React.createElement(MenuList, null, options.map(function (option, index) {\n      return React.createElement(MenuItem, {\n        key: option,\n        disabled: index === 2,\n        selected: index === selectedIndex,\n        onClick: function onClick(event) {\n          return handleMenuItemClick(event, index);\n        }\n      }, option);\n    })))));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}