{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport 'date-fns';\nimport React from 'react';\nimport MaskedInput from 'react-text-mask';\nimport NumberFormat from 'react-number-format';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Divider from '@material-ui/core/Divider';\nimport Hidden from '@material-ui/core/Hidden';\nimport ChatbotList01 from './chatbotlist01';\nimport ChatbotList02 from './chatbotlist02';\nimport ChatbotList03 from './chatbotlist03';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      padding: '20px 0',\n      width: '100%',\n      height: \"80vh\",\n      marginBottom: theme.spacing(2),\n      borderTop: \"6px solid #297bff\",\n      color: \"#434f5b\"\n    },\n    paperHead: {\n      padding: \"0 20px\"\n    },\n    paperBody: {\n      maxHeight: \"95%\",\n      overflowY: \"auto\"\n    },\n    headText: _defineProperty({}, theme.breakpoints.down(\"sm\"), {\n      fontSize: \"1.2rem\"\n    }),\n    buttonGroup: {\n      display: \"flex\",\n      justiftContent: \"center\",\n      marginBottom: \"10px\"\n    },\n    onButton: {\n      border: \"none\",\n      borderRadius: \"20px\",\n      padding: \"5px 15px\",\n      backgroundColor: \"#7daefe\",\n      color: \"#fff\",\n      fontSize: \"1rem\",\n      fontWeight: \"700\",\n      cursor: \"pointer\"\n    },\n    offButton: {\n      border: \"none\",\n      borderRadius: \"20px\",\n      padding: \"5px 15px\",\n      backgroundColor: \"#d3d3d3\",\n      color: \"#fff\",\n      fontSize: \"1rem\",\n      fontWeight: \"700\",\n      cursor: \"pointer\"\n    },\n    onLabel: {\n      color: \"#7daefe\",\n      fontSize: \"1rem\",\n      fontWeight: \"700\",\n      margin: \"0px 10px\",\n      lineHeight: \"2\"\n    },\n    offLabel: {\n      color: \"#d3d3d3\",\n      fontSize: \"1rem\",\n      fontWeight: \"700\",\n      margin: \"0px 10px\",\n      lineHeight: \"2\"\n    }\n  };\n});\nexport default function ChatbotModification(props) {\n  var classes = useStyles();\n  var type = props.type;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isToggleOn = _React$useState2[0],\n      setIsToggleOn = _React$useState2[1];\n\n  function handleToggle() {\n    setIsToggleOn(!isToggleOn);\n  }\n\n  return React.createElement(React.Fragment, {\n    className: classes.root\n  }, React.createElement(Paper, {\n    className: classes.paper\n  }, React.createElement(\"div\", {\n    className: classes.paperHead\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    className: classes.headText\n  }, type === 'list01' ? '챗봇 수정하기' : type === 'list02' ? '예약 수정/취소' : type === 'list03' ? '추가 문의 사항' : null), type === 'list03' ? React.createElement(\"div\", {\n    className: classes.buttonGroup\n  }, React.createElement(\"button\", {\n    className: isToggleOn ? classes.onButton : classes.offButton,\n    onClick: function onClick() {\n      return handleToggle();\n    }\n  }, \"\\uD3EC\\uC7A5\"), isToggleOn ? React.createElement(\"div\", {\n    className: classes.onLabel\n  }, \"On\") : React.createElement(\"div\", {\n    className: classes.offLabel\n  }, \"Off\"), React.createElement(\"button\", {\n    className: !isToggleOn ? classes.onButton : classes.offButton,\n    onClick: function onClick() {\n      return handleToggle();\n    }\n  }, \"\\uBCF4\\uB0C4\"), !isToggleOn ? React.createElement(\"div\", {\n    className: classes.onLabel\n  }, \"On\") : React.createElement(\"div\", {\n    className: classes.offLabel\n  }, \"Off\")) : null), React.createElement(Divider, {\n    light: true\n  }), React.createElement(\"div\", {\n    className: classes.paperBody\n  }, type === 'list01' ? React.createElement(ChatbotList01, null) : type === 'list02' ? React.createElement(ChatbotList02, null) : type === 'list03' ? React.createElement(ChatbotList03, null) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}